{"version":3,"sources":["context/favorite/favorite.context.js","components/city-list/city-list.component.js","components/search/search.component.js","components/favorite-card/favorite-card.component.js","components/favorite-list/favorite-list.component.js","context/modal/modal.context.js","components/modal-error/modal-error.component.js","pages/home/homepage.component.js","components/forecast-day/forecast-day.component.js","components/forecast/forecast.component.js","pages/forecast/forecast.component.js","components/header/header.component.js","App.js","index.js","utils/constants/api.constants.js"],"names":["FavoriteContext","createContext","favoriteCities","addFavoriteCity","deleteFavorite","CityList","_ref","cities","clearCityList","useContext","_jsx","ListGroup","className","children","map","city","key","_jsxs","Item","action","variant","onClick","saveCity","src","concat","country","toLowerCase","alt","name","Search","_useState","useState","_useState2","_slicedToArray","setCities","_useState3","_useState4","cityList","setCityList","useEffect","fetch","then","json","FormControl","type","onInput","event","enteredCity","target","value","length","filterCities","filter","includes","placeholder","withRouter","history","weather","setWeather","updateTrigger","setUpdateTrigger","WEATHER_API_KEY","Card","border","Header","as","Body","Text","icon","description","ListGroupItem","Math","round","main","temp","humidity","pressure","Footer","ButtonGroup","Button","push","coord","lat","lon","CalendarWeek","ArrowRepeat","Trash","FavoriteList","Row","Col","xs","sm","md","lg","FavoriteCard","Alert","ModalContext","modal","show","title","text","setModal","ModalError","_useContext","Modal","onHide","onClose","dismissible","Heading","HomePage","_Fragment","span","offset","ForecastDay","timestamp","day","Accordion","eventKey","dt","Date","toLocaleString","month","weekday","Table","bordered","size","responsive","morn","eve","night","feels_like","wind_speed","rain","match","weatherData","setWeatherData","isLoading","setIsLoading","_match$params","params","Spinner","animation","defaultActiveKey","daily","ForecastPage","xxl","Forecast","Navbar","bg","Container","fluid","Link","to","Brand","width","height","Collapse","OverlayTrigger","trigger","placement","overlay","Popover","id","QuestionCircle","App","setFavoriteCities","saveFavoriteCity","cityArray","localStorage","setItem","JSON","stringify","localFavorite","parse","getItem","Provider","cityData","_toConsumableArray","newFavorites","Switch","Route","exact","path","component","ReactDOM","render","BrowserRouter","basename","process","document","getElementById","_process","_process$env","REACT_APP_WEATHER_API_KEY"],"mappings":"uUAQeA,EANSC,wBAAc,CACpCC,eAAgB,GAChBC,gBAAiB,WAAO,EACxBC,eAAgB,WAAO,I,wBC8BVC,EA3BE,SAAHC,GAAmC,IAA7BC,EAAMD,EAANC,OAAQC,EAAaF,EAAbE,cAClBL,EAAoBM,qBAAWT,GAA/BG,gBAMR,OACEO,cAACC,IAAS,CAACC,UAAU,YAAWC,SAC7BN,EAAOO,KAAI,SAACC,EAAMC,GAAG,OACpBC,eAACN,IAAUO,KAAI,CAEbC,QAAM,EACNC,QAAQ,UACRC,QAAS,kBAZA,SAACN,GAChBZ,EAAgBY,GAChBP,EAAc,GAChB,CASuBc,CAASP,EAAK,EAACF,SAAA,CAE9BH,cAAA,OACEa,IAAG,2CAAAC,OAA6CT,EAAKU,QAAQC,cAAa,QAC1EC,IAAKZ,EAAKU,UAEXV,EAAKa,OATDZ,EAUU,KAIzB,E,SCYea,G,MArCA,WACb,IAAAC,EAA4BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjCvB,EAAMyB,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAAgCJ,mBAAS,IAAGK,EAAAH,YAAAE,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE5BG,qBAAU,WACRC,MAAM,eACHC,MAAK,SAAClC,GAAM,OAAKA,EAAOmC,MAAM,IAC9BD,MAAK,SAACC,GAAI,OAAKR,EAAUQ,EAAK,GACnC,GAAG,IAcH,OACEzB,eAAA,OAAKL,UAAU,eAAcC,SAAA,CAC3BH,cAAA,MAAAG,SAAI,gBACJH,cAACiC,IAAW,CACVC,KAAK,QACLC,QAjBa,SAACC,GAClB,IAAMC,EAAcD,EAAME,OAAOC,MACjC,GAAoB,OAAhBF,GAAwBA,EAAYG,QAAU,EAAG,CACnD,IAAMC,EAAe5C,EAAO6C,QAAO,SAACrC,GAAI,OACtCA,EAAKa,KAAKF,cAAc2B,SAASN,EAAYrB,cAAc,IAE7DY,EAAYa,EACd,MACMd,EAASa,QAAQZ,EAAY,GAErC,EAQMgB,YAAY,6BAEbjB,EAASa,OACRxC,cAACL,EAAQ,CAACE,OAAQ8B,EAAU7B,cAAe8B,IACzC,OAGV,G,sECmCeiB,G,MAAAA,aA7DM,SAAHjD,GAA2B,IAArBS,EAAIT,EAAJS,KAAMyC,EAAOlD,EAAPkD,QAC5B1B,EAA8BC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAArC2B,EAAOzB,EAAA,GAAE0B,EAAU1B,EAAA,GAC1BG,EAA0CJ,oBAAS,GAAMK,EAAAH,YAAAE,EAAA,GAAlDwB,EAAavB,EAAA,GAAEwB,EAAgBxB,EAAA,GAC9BhC,EAAmBK,qBAAWT,GAA9BI,eAcR,OAZAmC,qBAAU,WAENC,MAAM,qDAADhB,OACkDT,EAAKa,KAAI,wBAAAJ,OAAuBqC,MAEpFpB,MAAK,SAACgB,GAAO,OAAKA,EAAQf,MAAM,IAChCD,MAAK,SAACC,GAAI,OAAKgB,EAAWhB,EAAK,GAItC,GAAG,CAAC3B,EAAKa,KAAM+B,IAERF,EACLxC,eAAC6C,IAAI,CAAClD,UAAU,gBAAgBmD,OAAO,YAAWlD,SAAA,CAChDH,cAACoD,IAAKE,OAAM,CAACC,GAAG,KAAIpD,SAAE4C,EAAQ7B,OAC9BX,eAAC6C,IAAKI,KAAI,CAAArD,SAAA,CACRH,cAACoD,IAAKK,KAAI,CAAAtD,SACRH,cAAA,OACEa,IAAG,qCAAAC,OAAuCiC,EAAQA,QAAQ,GAAGW,KAAI,QACjEzC,IAAK8B,EAAQ7B,SAGjBlB,cAACoD,IAAKK,KAAI,CAAAtD,SAAE4C,EAAQA,QAAQ,GAAGY,iBAEjCpD,eAACN,IAAS,CAACC,UAAU,mBAAkBC,SAAA,CACrCI,eAACqD,IAAa,CAAAzD,SAAA,CAAC,SAAO0D,KAAKC,MAAMf,EAAQgB,KAAKC,MAAM,YACpDzD,eAACqD,IAAa,CAAAzD,SAAA,CAAC,aAAW4C,EAAQgB,KAAKE,SAAS,OAChD1D,eAACqD,IAAa,CAAAzD,SAAA,CAAC,aAAW4C,EAAQgB,KAAKG,SAAS,YAElDlE,cAACoD,IAAKe,OAAM,CAAAhE,SACVI,eAAC6D,IAAW,CAAAjE,SAAA,CACVH,cAACqE,IAAM,CACL3D,QAAQ,YACRC,QAAS,kBACPmC,EAAQwB,KAAK,aAADxD,OACGiC,EAAQ7B,KAAI,KAAAJ,OAAIiC,EAAQwB,MAAMC,IAAG,KAAA1D,OAAIiC,EAAQwB,MAAME,KACjE,EACFtE,SAEDH,cAAC0E,IAAY,MAEf1E,cAACqE,IAAM,CACL3D,QAAQ,YACRC,QAAS,kBAAMuC,GAAkBD,EAAc,EAAC9C,SAEhDH,cAAC2E,IAAW,MAEd3E,cAACqE,IAAM,CAAC3D,QAAQ,YAAYC,QAAS,kBAAMjB,EAAeW,EAAK,EAACF,SAC9DH,cAAC4E,IAAK,cAKZ,IACN,K,2BClDeC,G,OAhBM,WACnB,IAAQrF,EAAmBO,qBAAWT,GAA9BE,eACR,OAAOA,EAAegD,OACpBjC,eAACuE,IAAG,CAAC5E,UAAU,uCAAsCC,SAAA,CACnDH,cAAA,MAAAG,SAAI,kBACHX,EAAeY,KAAI,SAACC,EAAMC,GAAG,OAC5BN,cAAC+E,IAAG,CAAWC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEhF,SACzCH,cAACoF,EAAY,CAAC/E,KAAMA,KADZC,EAEJ,OAIVN,cAACqF,IAAK,CAAC3E,QAAQ,SAAQP,SAAC,gCAE5B,GCbemF,EATM/F,wBAAc,CACjCgG,MAAO,CACLC,MAAM,EACNC,MAAO,GACPC,KAAM,IAERC,SAAU,WAAO,I,SCqBJC,G,OArBI,WACjB,IAAAC,EAA4B9F,qBAAWuF,GAA/BC,EAAKM,EAALN,MAAOI,EAAQE,EAARF,SAEf,OACE3F,cAAC8F,IAAK,CACJN,KAAMD,EAAMC,KACZO,OAAQ,kBAAMJ,EAAS,CAAEH,MAAM,EAAOC,MAAO,GAAIC,KAAM,IAAK,EAACvF,SAE7DI,eAAC8E,IAAK,CACJ3E,QAAQ,SACRsF,QAAS,kBAAML,EAAS,CAAEH,MAAM,EAAOC,MAAO,GAAIC,KAAM,IAAK,EAC7DO,aAAW,EACX/F,UAAU,cAAaC,SAAA,CAEvBH,cAACqF,IAAMa,QAAO,CAAA/F,SAAEoF,EAAME,QACtBzF,cAAA,KAAAG,SAAIoF,EAAMG,WAIlB,GCHeS,EAhBE,WAAH,OACZ5F,eAAA6F,WAAA,CAAAjG,SAAA,CACEH,cAAC8E,IAAG,CAAA3E,SACFH,cAAC+E,IAAG,CAACC,GAAI,CAAEqB,KAAM,GAAIC,OAAQ,GAAKpB,GAAI,CAAEmB,KAAM,EAAGC,OAAQ,GAAInG,SAC3DH,cAACmB,EAAM,QAGXnB,cAAC8E,IAAG,CAAA3E,SACFH,cAAC+E,IAAG,CAAA5E,SACFH,cAAC6E,EAAY,QAGjB7E,cAAC4F,EAAU,MACV,E,kBC8CUW,G,OA7DK,SAAH3G,GAAiB,IACX4G,EADAC,EAAG7G,EAAH6G,IAQrB,OACElG,eAACmG,IAAUlG,KAAI,CAACmG,SAAUF,EAAIG,GAAGzG,SAAA,CAC/BH,cAAC0G,IAAUpD,OAAM,CAAAnD,SACfH,cAAA,QAAAG,UAVeqG,EAUIC,EAAIG,GAT3B,IAAIC,KAAiB,IAAZL,GAAkBM,eAAe,KAAM,CAC9CC,MAAO,OACPC,QAAS,OACTP,IAAK,iBAQLlG,eAACmG,IAAUlD,KAAI,CAAArD,SAAA,CACbH,cAAA,OACEa,IAAG,qCAAAC,OAAuC2F,EAAI1D,QAAQ,GAAGW,KAAI,QAC7DzC,IAAI,KAELwF,EAAI1D,QAAQ,GAAGY,YAChBpD,eAAC0G,IAAK,CAACC,UAAQ,EAACC,KAAK,KAAKC,YAAU,EAAAjH,SAAA,CAClCH,cAAA,SAAAG,SACEI,eAAA,MAAAJ,SAAA,CACEH,cAAA,SACAA,cAAA,MAAAG,SAAI,YACJH,cAAA,MAAAG,SAAI,QACJH,cAAA,MAAAG,SAAI,YACJH,cAAA,MAAAG,SAAI,eAGRI,eAAA,SAAAJ,SAAA,CACEI,eAAA,MAAAJ,SAAA,CACEH,cAAA,MAAAG,SAAI,gBACJI,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIzC,KAAKqD,MAAM,YAC/B9G,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIzC,KAAKyC,KAAK,YAC9BlG,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIzC,KAAKsD,KAAK,YAC9B/G,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIzC,KAAKuD,OAAO,eAElChH,eAAA,MAAAJ,SAAA,CACEH,cAAA,MAAAG,SAAI,eACJI,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIe,WAAWH,MAAM,YACrC9G,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIe,WAAWf,KAAK,YACpClG,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIe,WAAWF,KAAK,YACpC/G,eAAA,MAAAJ,SAAA,CAAK0D,KAAKC,MAAM2C,EAAIe,WAAWD,OAAO,qBAI5ChH,eAACN,IAAS,CAACC,UAAU,mBAAkBC,SAAA,CACrCI,eAACqD,IAAa,CAAAzD,SAAA,CAAC,aAAWsG,EAAIxC,SAAS,OACvC1D,eAACqD,IAAa,CAAAzD,SAAA,CAAC,aAAWsG,EAAIvC,SAAS,YAEzC3D,eAACN,IAAS,CAACC,UAAU,mBAAkBC,SAAA,CACrCI,eAACqD,IAAa,CAAAzD,SAAA,CAAC,eAAasG,EAAIgB,WAAW,SAC3ClH,eAACqD,IAAa,CAAAzD,SAAA,CAAC,mBACIsG,EAAIiB,KAAO7D,KAAKC,MAAM2C,EAAIiB,MAAQ,EAAE,eAMjE,G,SChBe7E,G,OAAAA,aAvCE,SAAHjD,GAAmB,IAAb+H,EAAK/H,EAAL+H,MAClBvG,EAAsCC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA7CwG,EAAWtG,EAAA,GAAEuG,EAAcvG,EAAA,GAClCG,EAAkCJ,oBAAS,GAAKK,EAAAH,YAAAE,EAAA,GAAzCqG,EAASpG,EAAA,GAAEqG,EAAYrG,EAAA,GAC9BsG,EAA2BL,EAAMM,OAAzB5H,EAAI2H,EAAJ3H,KAAMmE,EAAGwD,EAAHxD,IAAKC,EAAGuD,EAAHvD,IAiBnB,OAfA5C,qBAAU,WAENC,MAAM,uDAADhB,OACoD0D,EAAG,SAAA1D,OAAQ2D,EAAG,wBAAA3D,OAAuBqC,MAE3FpB,MAAK,SAACgB,GAAO,OAAKA,EAAQf,MAAM,IAChCD,MAAK,SAACC,GACL6F,EAAe7F,GACf+F,GAAa,EACf,GAIN,GAAG,CAACvD,EAAKC,IAEDqD,EAWNvH,eAAA,OAAKL,UAAU,WAAUC,SAAA,CACvBH,cAACkI,IAAO,CAACC,UAAU,SAASzH,QAAQ,cACpCV,cAACkI,IAAO,CAACC,UAAU,SAASzH,QAAQ,YACpCV,cAACkI,IAAO,CAACC,UAAU,SAASzH,QAAQ,iBAbtCH,eAAA,OAAKL,UAAU,WAAUC,SAAA,CACvBH,cAAA,MAAAG,SAAKE,IACLL,cAAA,MAAAG,SAAI,mBACJH,cAAC0G,IAAS,CAAC0B,iBAAkBR,EAAYS,MAAM,GAAGzB,GAAGzG,SAClDyH,EAAYS,MAAMjI,KAAI,SAACqG,EAAKnG,GAAG,OAC9BN,cAACuG,EAAW,CAAWE,IAAKA,GAAVnG,EAAiB,QAW7C,KC/BegI,EAVM,WACnB,OACEtI,cAAC8E,IAAG,CAAA3E,SACFH,cAAC+E,IAAG,CAACC,GAAI,GAAIE,GAAI,CAAEmB,KAAM,GAAIC,OAAQ,GAAKiC,IAAK,CAAElC,KAAM,EAAGC,OAAQ,GAAInG,SACpEH,cAACwI,EAAQ,OAIjB,E,4CC+CelF,G,OA7CA,WAAH,OACVtD,cAAC8E,IAAG,CAAA3E,SACFH,cAAC+E,IAAG,CAAA5E,SACFH,cAACyI,IAAM,CAACvI,UAAU,SAASwI,GAAG,UAAUhI,QAAQ,OAAMP,SACpDI,eAACoI,IAAS,CAACC,OAAK,EAAAzI,SAAA,CACdH,cAAC6I,IAAI,CAACC,GAAG,IAAG3I,SACVI,eAACkI,IAAOM,MAAK,CAAA5I,SAAA,CACXH,cAAA,OACEa,IAAI,wBACJmI,MAAM,KACNC,OAAO,KACP/I,UAAU,gCACVe,IAAI,SACJ,mBAINjB,cAACyI,IAAOS,SAAQ,CAAChJ,UAAU,sBAAqBC,SAC9CH,cAACmJ,IAAc,CACbC,QAAQ,QACRC,UAAU,OACVC,QACE/I,eAACgJ,IAAO,CAACC,GAAG,gBAAerJ,SAAA,CACzBH,cAACuJ,IAAQjG,OAAM,CAACC,GAAG,KAAIpD,SAAC,cACxBI,eAACgJ,IAAQ/F,KAAI,CAAArD,SAAA,CAAC,+BACgBH,cAAA,UAAAG,SAAQ,oBAAwB,0IAMjEA,SAEDI,eAAC8D,IAAM,CAACnE,UAAU,QAAQQ,QAAQ,YAAWP,SAAA,CAC3CH,cAACyJ,IAAc,CAACvJ,UAAU,OAAOiH,KAAM,KACvCnH,cAAA,QAAAG,SAAM,wBAOd,G,OCgBOuJ,MA3Df,WACE,IAAAtI,EAA4CC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjD5B,EAAc8B,EAAA,GAAEqI,EAAiBrI,EAAA,GACxCG,EAA0BJ,mBAAS,CACjCmE,MAAM,EACNC,MAAO,GACPC,KAAM,KACNhE,EAAAH,YAAAE,EAAA,GAJK8D,EAAK7D,EAAA,GAAEiE,EAAQjE,EAAA,GA4BhBkI,EAAmB,SAACC,GACxBF,EAAkBE,GAClBC,aAAaC,QAAQ,iBAAkBC,KAAKC,UAAUJ,GACxD,EASA,OAPAhI,qBAAU,WACR,IAAMqI,EAAgBF,KAAKG,MAAML,aAAaM,QAAQ,mBAChC,OAAlBF,GACFP,EAAkBO,EAEtB,GAAG,IAGD3J,eAACoI,IAAS,CAACzI,UAAU,MAAM0I,OAAK,EAAAzI,SAAA,CAC9BH,cAACsD,EAAM,IACPtD,cAACV,EAAgB+K,SAAQ,CACvB9H,MAAO,CAAE/C,iBAAgBC,gBAtCP,SAAC6K,GACL9K,EAAekD,QAC/B,SAACrC,GAAI,OAAKA,EAAKa,OAASoJ,EAASpJ,MAAQb,EAAKmE,MAAQ8F,EAAS9F,GAAG,IAEtDhC,OACZmD,EAAS,CACPH,MAAM,EACNC,MAAO,SACPC,KAAM,mCAGRkE,EAAiB,GAAD9I,OAAAyJ,YAAK/K,GAAc,CAAE8K,IAEzC,EAyBgD5K,eAvBzB,SAAC4K,GACtB,IAAME,EAAehL,EAAekD,QAClC,SAACrC,GAAI,OAAKA,EAAKa,OAASoJ,EAASpJ,MAAQb,EAAKmE,MAAQ8F,EAAS9F,GAAG,IAEpEoF,EAAiBY,EACnB,GAkBiErK,SAE3DH,cAACsF,EAAa+E,SAAQ,CAAC9H,MAAO,CAAEgD,QAAOI,YAAWxF,SAChDI,eAACkK,IAAM,CAAAtK,SAAA,CACLH,cAAC0K,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAW1E,IACjCnG,cAAC0K,IAAK,CAACE,KAAK,4BAA4BC,UAAWvC,aAM/D,E,OChEAwC,IAASC,OACP/K,cAACgL,IAAa,CAACC,SAAUC,eAAuB/K,SAC9CH,cAAC0J,EAAG,MAENyB,SAASC,eAAe,Q,yFCZnB,IAAMjI,GAAyB,QAAPkI,EAAAH,SAAO,IAAAG,GAAK,QAALC,EAAPD,mNAAY,IAAAC,OAAL,EAAPA,EAAcC,4BAA6B,E","file":"static/js/main.e99a16ef.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst FavoriteContext = createContext({\n  favoriteCities: [],\n  addFavoriteCity: () => {},\n  deleteFavorite: () => {},\n});\n\nexport default FavoriteContext;\n","import React, { useContext } from \"react\";\n\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\n\nimport { ListGroup } from \"react-bootstrap\";\n\nimport \"./city-list.style.scss\";\n\nconst CityList = ({ cities, clearCityList }) => {\n  const { addFavoriteCity } = useContext(FavoriteContext);\n  const saveCity = (city) => {\n    addFavoriteCity(city);\n    clearCityList([]);\n  };\n\n  return (\n    <ListGroup className=\"city_list\">\n      {cities.map((city, key) => (\n        <ListGroup.Item\n          key={key}\n          action\n          variant=\"primary\"\n          onClick={() => saveCity(city)}\n        >\n          <img\n            src={`https://openweathermap.org/images/flags/${city.country.toLowerCase()}.png`}\n            alt={city.country}\n          />\n          {city.name}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default CityList;\n","import React, { useEffect, useState } from \"react\";\n\nimport CityList from \"../city-list/city-list.component\";\n\nimport { FormControl } from \"react-bootstrap\";\n\nimport \"./search.style.scss\";\n\nconst Search = () => {\n  const [cities, setCities] = useState([]);\n  const [cityList, setCityList] = useState([]);\n\n  useEffect(() => {\n    fetch(\"cities.json\")\n      .then((cities) => cities.json())\n      .then((json) => setCities(json));\n  }, []);\n\n  const handleCity = (event) => {\n    const enteredCity = event.target.value;\n    if (enteredCity !== null && enteredCity.length >= 3) {\n      const filterCities = cities.filter((city) =>\n        city.name.toLowerCase().includes(enteredCity.toLowerCase())\n      );\n      setCityList(filterCities);\n    } else {\n      if (cityList.length) setCityList([]);\n    }\n  };\n\n  return (\n    <div className=\"search_block\">\n      <h4>Search city</h4>\n      <FormControl\n        type=\"input\"\n        onInput={handleCity}\n        placeholder=\"Enter 3 and more letters\"\n      />\n      {cityList.length ? (\n        <CityList cities={cityList} clearCityList={setCityList} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\n\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n  ButtonGroup,\n  Button,\n} from \"react-bootstrap\";\nimport { Trash, ArrowRepeat, CalendarWeek } from \"react-bootstrap-icons\";\nimport { WEATHER_API_KEY } from \"../../utils/constants/api.constants\";\n\nimport \"./favorite-card.style.scss\";\n\nconst FavoriteCard = ({ city, history }) => {\n  const [weather, setWeather] = useState(null);\n  const [updateTrigger, setUpdateTrigger] = useState(false);\n  const { deleteFavorite } = useContext(FavoriteContext);\n\n  useEffect(() => {\n    const fetchWeather = () => {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city.name}&units=metric&appid=${WEATHER_API_KEY}`\n      )\n        .then((weather) => weather.json())\n        .then((json) => setWeather(json));\n    };\n\n    fetchWeather();\n  }, [city.name, updateTrigger]);\n\n  return weather ? (\n    <Card className=\"favorite_card\" border=\"secondary\">\n      <Card.Header as=\"h5\">{weather.name}</Card.Header>\n      <Card.Body>\n        <Card.Text>\n          <img\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n            alt={weather.name}\n          />\n        </Card.Text>\n        <Card.Text>{weather.weather[0].description}</Card.Text>\n      </Card.Body>\n      <ListGroup className=\"list-group-flush\">\n        <ListGroupItem>Temp: {Math.round(weather.main.temp)}℃</ListGroupItem>\n        <ListGroupItem>Humidity: {weather.main.humidity}%</ListGroupItem>\n        <ListGroupItem>Pressure: {weather.main.pressure}hPa</ListGroupItem>\n      </ListGroup>\n      <Card.Footer>\n        <ButtonGroup>\n          <Button\n            variant=\"secondary\"\n            onClick={() =>\n              history.push(\n                `/forecast/${weather.name}/${weather.coord.lat}/${weather.coord.lon}`\n              )\n            }\n          >\n            <CalendarWeek />\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={() => setUpdateTrigger(!updateTrigger)}\n          >\n            <ArrowRepeat />\n          </Button>\n          <Button variant=\"secondary\" onClick={() => deleteFavorite(city)}>\n            <Trash />\n          </Button>\n        </ButtonGroup>\n      </Card.Footer>\n    </Card>\n  ) : null;\n};\n\nexport default withRouter(FavoriteCard);\n","import React, { useContext } from \"react\";\n\nimport FavoriteCard from \"../favorite-card/favorite-card.component\";\n\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\n\nimport { Row, Col, Alert } from \"react-bootstrap\";\n\nimport \"./favorite-list.style.scss\";\n\nconst FavoriteList = () => {\n  const { favoriteCities } = useContext(FavoriteContext);\n  return favoriteCities.length ? (\n    <Row className=\"justify-content-center favorite_list\">\n      <h4>Favorite List</h4>\n      {favoriteCities.map((city, key) => (\n        <Col key={key} xs={10} sm={6} md={4} lg={3}>\n          <FavoriteCard city={city} />\n        </Col>\n      ))}\n    </Row>\n  ) : (\n    <Alert variant=\"danger\">Favorite city list is empty!</Alert>\n  );\n};\n\nexport default FavoriteList;\n","import { createContext } from \"react\";\n\nconst ModalContext = createContext({\n  modal: {\n    show: false,\n    title: \"\",\n    text: \"\",\n  },\n  setModal: () => {},\n});\n\nexport default ModalContext;\n","import React, { useContext } from \"react\";\n\nimport ModalContext from \"../../context/modal/modal.context\";\n\nimport { Modal, Alert } from \"react-bootstrap\";\n\nimport \"./modal-error.style.scss\";\n\nconst ModalError = () => {\n  const { modal, setModal } = useContext(ModalContext);\n\n  return (\n    <Modal\n      show={modal.show}\n      onHide={() => setModal({ show: false, title: \"\", text: \"\" })}\n    >\n      <Alert\n        variant=\"danger\"\n        onClose={() => setModal({ show: false, title: \"\", text: \"\" })}\n        dismissible\n        className=\"modal_alert\"\n      >\n        <Alert.Heading>{modal.title}</Alert.Heading>\n        <p>{modal.text}</p>\n      </Alert>\n    </Modal>\n  );\n};\n\nexport default ModalError;\n","import React from \"react\";\n\nimport Search from \"../../components/search/search.component\";\nimport FavoriteList from \"../../components/favorite-list/favorite-list.component\";\nimport ModalError from \"../../components/modal-error/modal-error.component\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nconst HomePage = () => (\n  <>\n    <Row>\n      <Col xs={{ span: 10, offset: 1 }} md={{ span: 8, offset: 2 }}>\n        <Search />\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <FavoriteList />\n      </Col>\n    </Row>\n    <ModalError />\n  </>\n);\n\nexport default HomePage;\n","import React from \"react\";\n\nimport { ListGroup, ListGroupItem, Accordion, Table } from \"react-bootstrap\";\n\nimport \"./forecast-day.style.scss\";\n\nconst ForecastDay = ({ day }) => {\n  const prepareDate = (timestamp) =>\n    new Date(timestamp * 1000).toLocaleString(\"en\", {\n      month: \"long\",\n      weekday: \"long\",\n      day: \"numeric\",\n    });\n\n  return (\n    <Accordion.Item eventKey={day.dt}>\n      <Accordion.Header>\n        <span>{prepareDate(day.dt)}</span>\n      </Accordion.Header>\n      <Accordion.Body>\n        <img\n          src={`https://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\n          alt=\"\"\n        />\n        {day.weather[0].description}\n        <Table bordered size=\"sm\" responsive>\n          <thead>\n            <tr>\n              <th></th>\n              <th>Morning</th>\n              <th>Day</th>\n              <th>Evening</th>\n              <th>Night</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>TEMPERATURE</td>\n              <td>{Math.round(day.temp.morn)}℃</td>\n              <td>{Math.round(day.temp.day)}℃</td>\n              <td>{Math.round(day.temp.eve)}℃</td>\n              <td>{Math.round(day.temp.night)}℃</td>\n            </tr>\n            <tr>\n              <td>FEELS LIKE</td>\n              <td>{Math.round(day.feels_like.morn)}℃</td>\n              <td>{Math.round(day.feels_like.day)}℃</td>\n              <td>{Math.round(day.feels_like.eve)}℃</td>\n              <td>{Math.round(day.feels_like.night)}℃</td>\n            </tr>\n          </tbody>\n        </Table>\n        <ListGroup className=\"list-group-flush\">\n          <ListGroupItem>Humidity: {day.humidity}%</ListGroupItem>\n          <ListGroupItem>Pressure: {day.pressure}hPa</ListGroupItem>\n        </ListGroup>\n        <ListGroup className=\"list-group-flush\">\n          <ListGroupItem>Wind speed: {day.wind_speed}m/s</ListGroupItem>\n          <ListGroupItem>\n            Chance of rain: {day.rain ? Math.round(day.rain) : 0}%\n          </ListGroupItem>\n        </ListGroup>\n      </Accordion.Body>\n    </Accordion.Item>\n  );\n};\n\nexport default ForecastDay;\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport ForecastDay from \"../forecast-day/forecast-day.component\";\n\nimport { Spinner, Accordion } from \"react-bootstrap\";\nimport { WEATHER_API_KEY } from \"../../utils/constants/api.constants\";\n\nimport \"./forecast.style.scss\";\n\nconst Forecast = ({ match }) => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { city, lat, lon } = match.params;\n\n  useEffect(() => {\n    const fetchForecast = () => {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=${WEATHER_API_KEY}`\n      )\n        .then((weather) => weather.json())\n        .then((json) => {\n          setWeatherData(json);\n          setIsLoading(false);\n        });\n    };\n\n    fetchForecast();\n  }, [lat, lon]);\n\n  return !isLoading ? (\n    <div className=\"forecast\">\n      <h1>{city}</h1>\n      <h3>8-day forecast</h3>\n      <Accordion defaultActiveKey={weatherData.daily[0].dt}>\n        {weatherData.daily.map((day, key) => (\n          <ForecastDay key={key} day={day} />\n        ))}\n      </Accordion>\n    </div>\n  ) : (\n    <div className=\"forecast\">\n      <Spinner animation=\"border\" variant=\"secondary\" />\n      <Spinner animation=\"border\" variant=\"primary\" />\n      <Spinner animation=\"border\" variant=\"secondary\" />\n    </div>\n  );\n};\n\nexport default withRouter(Forecast);\n","import React from \"react\";\n\nimport Forecast from \"../../components/forecast/forecast.component\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nconst ForecastPage = () => {\n  return (\n    <Row>\n      <Col xs={12} md={{ span: 10, offset: 1 }} xxl={{ span: 8, offset: 2 }}>\n        <Forecast />\n      </Col>\n    </Row>\n  );\n};\n\nexport default ForecastPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Navbar,\n  Container,\n  Button,\n  Popover,\n  OverlayTrigger,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport { QuestionCircle } from \"react-bootstrap-icons\";\n\nimport \"./header.style.scss\";\n\nconst Header = () => (\n  <Row>\n    <Col>\n      <Navbar className=\"header\" bg=\"primary\" variant=\"dark\">\n        <Container fluid>\n          <Link to=\"/\">\n            <Navbar.Brand>\n              <img\n                src=\"/weather_app/logo.svg\"\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top logo\"\n                alt=\"logo\"\n              />\n              Weather App\n            </Navbar.Brand>\n          </Link>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <OverlayTrigger\n              trigger=\"click\"\n              placement=\"left\"\n              overlay={\n                <Popover id=\"popover-basic\">\n                  <Popover.Header as=\"h3\">About App</Popover.Header>\n                  <Popover.Body>\n                    This is a test app based on <strong>OpenWeather API</strong>\n                    . You can type the city name and see today's forecast or\n                    click the calendar button to see 8-day weather forecast for\n                    chosen city.\n                  </Popover.Body>\n                </Popover>\n              }\n            >\n              <Button className=\"about\" variant=\"secondary\">\n                <QuestionCircle className=\"icon\" size={22} />\n                <span>Help</span>\n              </Button>\n            </OverlayTrigger>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </Col>\n  </Row>\n);\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport { Switch, Route } from \"react-router\";\n\nimport HomePage from \"./pages/home/homepage.component\";\nimport ForecastPage from \"./pages/forecast/forecast.component\";\n\nimport Header from \"./components/header/header.component\";\n\nimport FavoriteContext from \"./context/favorite/favorite.context\";\nimport ModalContext from \"./context/modal/modal.context\";\n\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const [favoriteCities, setFavoriteCities] = useState([]);\n  const [modal, setModal] = useState({\n    show: false,\n    title: \"\",\n    text: \"\",\n  });\n\n  const addFavoriteCity = (cityData) => {\n    const checkCity = favoriteCities.filter(\n      (city) => city.name === cityData.name && city.lat === cityData.lat\n    );\n    if (checkCity.length) {\n      setModal({\n        show: true,\n        title: \"Error!\",\n        text: \"City already in favorite list!\",\n      });\n    } else {\n      saveFavoriteCity([...favoriteCities, cityData]);\n    }\n  };\n\n  const deleteFavorite = (cityData) => {\n    const newFavorites = favoriteCities.filter(\n      (city) => city.name !== cityData.name && city.lat !== cityData.lat\n    );\n    saveFavoriteCity(newFavorites);\n  };\n\n  const saveFavoriteCity = (cityArray) => {\n    setFavoriteCities(cityArray);\n    localStorage.setItem(\"favoriteCities\", JSON.stringify(cityArray));\n  };\n\n  useEffect(() => {\n    const localFavorite = JSON.parse(localStorage.getItem(\"favoriteCities\"));\n    if (localFavorite !== null) {\n      setFavoriteCities(localFavorite);\n    }\n  }, []);\n\n  return (\n    <Container className=\"App\" fluid>\n      <Header />\n      <FavoriteContext.Provider\n        value={{ favoriteCities, addFavoriteCity, deleteFavorite }}\n      >\n        <ModalContext.Provider value={{ modal, setModal }}>\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/forecast/:city/:lat/:lon\" component={ForecastPage} />\n          </Switch>\n        </ModalContext.Provider>\n      </FavoriteContext.Provider>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n","export const WEATHER_API_KEY = process?.env?.REACT_APP_WEATHER_API_KEY || ''"],"sourceRoot":""}