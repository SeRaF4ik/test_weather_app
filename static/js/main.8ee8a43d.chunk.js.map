{"version":3,"sources":["context/favorite/favorite.context.js","components/city-list/city-list.component.js","components/search/search.component.js","components/favorite-card/favorite-card.component.js","components/favorite-list/favorite-list.component.js","context/modal/modal.context.js","components/modal-error/modal-error.component.js","pages/home/homepage.component.js","components/forecast-day/forecast-day.component.js","components/forecast/forecast.component.js","pages/forecast/forecast.component.js","components/header/header.component.js","App.js","index.js"],"names":["FavoriteContext","createContext","favoriteCities","addFavoriteCity","deleteFavorite","CityList","cities","clearCityList","useContext","ListGroup","className","map","city","key","Item","action","variant","onClick","saveCity","src","country","toLowerCase","alt","name","Search","useState","setCities","cityList","setCityList","useEffect","fetch","then","json","FormControl","type","onInput","event","enteredCity","target","value","length","filterCities","filter","includes","placeholder","withRouter","history","weather","setWeather","updateTrigger","setUpdateTrigger","Card","border","Header","as","Body","Text","icon","description","ListGroupItem","Math","round","main","temp","humidity","pressure","Footer","ButtonGroup","Button","push","coord","lat","lon","FavoriteList","Row","Col","xs","sm","md","lg","Alert","ModalContext","modal","show","title","text","setModal","ModalError","Modal","onHide","onClose","dismissible","Heading","HomePage","span","offset","ForecastDay","timestamp","day","Accordion","eventKey","dt","Date","toLocaleString","month","weekday","Table","bordered","size","responsive","morn","eve","night","feels_like","wind_speed","rain","match","weatherData","setWeatherData","isLoading","setIsLoading","params","Spinner","animation","defaultActiveKey","daily","ForecastPage","xxl","Navbar","bg","Container","fluid","to","Brand","width","height","Collapse","OverlayTrigger","trigger","placement","overlay","Popover","id","App","setFavoriteCities","saveFavoriteCity","cityArray","localStorage","setItem","JSON","stringify","localFavorite","parse","getItem","Provider","cityData","newFavorites","exact","path","component","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.8ee8a43d.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst FavoriteContext = createContext({\r\n  favoriteCities: [],\r\n  addFavoriteCity: () => {},\r\n  deleteFavorite: () => {},\r\n});\r\n\r\nexport default FavoriteContext;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\r\n\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nimport \"./city-list.style.scss\";\r\n\r\nconst CityList = ({ cities, clearCityList }) => {\r\n  const { addFavoriteCity } = useContext(FavoriteContext);\r\n  const saveCity = (city) => {\r\n    addFavoriteCity(city);\r\n    clearCityList([]);\r\n  };\r\n\r\n  return (\r\n    <ListGroup className=\"city_list\">\r\n      {cities.map((city, key) => (\r\n        <ListGroup.Item\r\n          key={key}\r\n          action\r\n          variant=\"primary\"\r\n          onClick={() => saveCity(city)}\r\n        >\r\n          <img\r\n            src={`https://openweathermap.org/images/flags/${city.country.toLowerCase()}.png`}\r\n            alt={city.country}\r\n          />\r\n          {city.name}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default CityList;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport CityList from \"../city-list/city-list.component\";\r\n\r\nimport { FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./search.style.scss\";\r\n\r\nconst Search = () => {\r\n  const [cities, setCities] = useState([]);\r\n  const [cityList, setCityList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"cities.json\")\r\n      .then((cities) => cities.json())\r\n      .then((json) => setCities(json));\r\n  }, []);\r\n\r\n  const handleCity = (event) => {\r\n    const enteredCity = event.target.value;\r\n    if (enteredCity !== null && enteredCity.length >= 3) {\r\n      const filterCities = cities.filter((city) =>\r\n        city.name.toLowerCase().includes(enteredCity.toLowerCase())\r\n      );\r\n      setCityList(filterCities);\r\n    } else {\r\n      if (cityList.length) setCityList([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search_block\">\r\n      <h4>Search city</h4>\r\n      <FormControl\r\n        type=\"input\"\r\n        onInput={handleCity}\r\n        placeholder=\"Enter 3 and more letters\"\r\n      />\r\n      {cityList.length ? (\r\n        <CityList cities={cityList} clearCityList={setCityList} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\r\n\r\nimport {\r\n  Card,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { Trash, ArrowRepeat, CalendarWeek } from \"react-bootstrap-icons\";\r\n\r\nimport \"./favorite-card.style.scss\";\r\n\r\nconst FavoriteCard = ({ city, history }) => {\r\n  const [weather, setWeather] = useState(null);\r\n  const [updateTrigger, setUpdateTrigger] = useState(false);\r\n  const { deleteFavorite } = useContext(FavoriteContext);\r\n\r\n  useEffect(() => {\r\n    const fetchWeather = () => {\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city.name}&units=metric&appid=e84bb2e916ce72d4f288bd3fe0526b6a`\r\n      )\r\n        .then((weather) => weather.json())\r\n        .then((json) => setWeather(json));\r\n    };\r\n\r\n    fetchWeather();\r\n  }, [city.name, updateTrigger]);\r\n\r\n  return weather ? (\r\n    <Card className=\"favorite_card\" border=\"secondary\">\r\n      <Card.Header as=\"h5\">{weather.name}</Card.Header>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          <img\r\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\r\n            alt={weather.name}\r\n          />\r\n        </Card.Text>\r\n        <Card.Text>{weather.weather[0].description}</Card.Text>\r\n      </Card.Body>\r\n      <ListGroup className=\"list-group-flush\">\r\n        <ListGroupItem>Temp: {Math.round(weather.main.temp)}℃</ListGroupItem>\r\n        <ListGroupItem>Humidity: {weather.main.humidity}%</ListGroupItem>\r\n        <ListGroupItem>Pressure: {weather.main.pressure}hPa</ListGroupItem>\r\n      </ListGroup>\r\n      <Card.Footer>\r\n        <ButtonGroup>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              history.push(\r\n                `/forecast/${weather.name}/${weather.coord.lat}/${weather.coord.lon}`\r\n              )\r\n            }\r\n          >\r\n            <CalendarWeek />\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => setUpdateTrigger(!updateTrigger)}\r\n          >\r\n            <ArrowRepeat />\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => deleteFavorite(city)}>\r\n            <Trash />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Card.Footer>\r\n    </Card>\r\n  ) : null;\r\n};\r\n\r\nexport default withRouter(FavoriteCard);\r\n","import React, { useContext } from \"react\";\r\n\r\nimport FavoriteCard from \"../favorite-card/favorite-card.component\";\r\n\r\nimport FavoriteContext from \"../../context/favorite/favorite.context\";\r\n\r\nimport { Row, Col, Alert } from \"react-bootstrap\";\r\n\r\nimport \"./favorite-list.style.scss\";\r\n\r\nconst FavoriteList = () => {\r\n  const { favoriteCities } = useContext(FavoriteContext);\r\n  return favoriteCities.length ? (\r\n    <Row className=\"justify-content-center favorite_list\">\r\n      <h4>Favorite List</h4>\r\n      {favoriteCities.map((city, key) => (\r\n        <Col key={key} xs={10} sm={6} md={4} lg={3}>\r\n          <FavoriteCard city={city} />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  ) : (\r\n    <Alert variant=\"danger\">Favorite city list is empty!</Alert>\r\n  );\r\n};\r\n\r\nexport default FavoriteList;\r\n","import { createContext } from \"react\";\r\n\r\nconst ModalContext = createContext({\r\n  modal: {\r\n    show: false,\r\n    title: \"\",\r\n    text: \"\",\r\n  },\r\n  setModal: () => {},\r\n});\r\n\r\nexport default ModalContext;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport ModalContext from \"../../context/modal/modal.context\";\r\n\r\nimport { Modal, Alert } from \"react-bootstrap\";\r\n\r\nimport \"./modal-error.style.scss\";\r\n\r\nconst ModalError = () => {\r\n  const { modal, setModal } = useContext(ModalContext);\r\n\r\n  return (\r\n    <Modal\r\n      show={modal.show}\r\n      onHide={() => setModal({ show: false, title: \"\", text: \"\" })}\r\n    >\r\n      <Alert\r\n        variant=\"danger\"\r\n        onClose={() => setModal({ show: false, title: \"\", text: \"\" })}\r\n        dismissible\r\n        className=\"modal_alert\"\r\n      >\r\n        <Alert.Heading>{modal.title}</Alert.Heading>\r\n        <p>{modal.text}</p>\r\n      </Alert>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalError;\r\n","import React from \"react\";\r\n\r\nimport Search from \"../../components/search/search.component\";\r\nimport FavoriteList from \"../../components/favorite-list/favorite-list.component\";\r\nimport ModalError from \"../../components/modal-error/modal-error.component\";\r\n\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst HomePage = () => (\r\n  <>\r\n    <Row>\r\n      <Col xs={{ span: 10, offset: 1 }} md={{ span: 8, offset: 2 }}>\r\n        <Search />\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <FavoriteList />\r\n      </Col>\r\n    </Row>\r\n    <ModalError />\r\n  </>\r\n);\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n\r\nimport { ListGroup, ListGroupItem, Accordion, Table } from \"react-bootstrap\";\r\n\r\nimport \"./forecast-day.style.scss\";\r\n\r\nconst ForecastDay = ({ day }) => {\r\n  const prepareDate = (timestamp) =>\r\n    new Date(timestamp * 1000).toLocaleString(\"en\", {\r\n      month: \"long\",\r\n      weekday: \"long\",\r\n      day: \"numeric\",\r\n    });\r\n\r\n  return (\r\n    <Accordion.Item eventKey={day.dt}>\r\n      <Accordion.Header>\r\n        <span>{prepareDate(day.dt)}</span>\r\n      </Accordion.Header>\r\n      <Accordion.Body>\r\n        <img\r\n          src={`https://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n          alt=\"\"\r\n        />\r\n        {day.weather[0].description}\r\n        <Table bordered size=\"sm\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>Morning</th>\r\n              <th>Day</th>\r\n              <th>Evening</th>\r\n              <th>Night</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>TEMPERATURE</td>\r\n              <td>{Math.round(day.temp.morn)}℃</td>\r\n              <td>{Math.round(day.temp.day)}℃</td>\r\n              <td>{Math.round(day.temp.eve)}℃</td>\r\n              <td>{Math.round(day.temp.night)}℃</td>\r\n            </tr>\r\n            <tr>\r\n              <td>FEELS LIKE</td>\r\n              <td>{Math.round(day.feels_like.morn)}℃</td>\r\n              <td>{Math.round(day.feels_like.day)}℃</td>\r\n              <td>{Math.round(day.feels_like.eve)}℃</td>\r\n              <td>{Math.round(day.feels_like.night)}℃</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n        <ListGroup className=\"list-group-flush\">\r\n          <ListGroupItem>Humidity: {day.humidity}%</ListGroupItem>\r\n          <ListGroupItem>Pressure: {day.pressure}hPa</ListGroupItem>\r\n        </ListGroup>\r\n        <ListGroup className=\"list-group-flush\">\r\n          <ListGroupItem>Wind speed: {day.wind_speed}m/s</ListGroupItem>\r\n          <ListGroupItem>\r\n            Chance of rain: {day.rain ? Math.round(day.rain) : 0}%\r\n          </ListGroupItem>\r\n        </ListGroup>\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  );\r\n};\r\n\r\nexport default ForecastDay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport ForecastDay from \"../forecast-day/forecast-day.component\";\r\n\r\nimport { Spinner, Accordion } from \"react-bootstrap\";\r\n\r\nimport \"./forecast.style.scss\";\r\n\r\nconst Forecast = ({ match }) => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { city, lat, lon } = match.params;\r\n\r\n  useEffect(() => {\r\n    const fetchForecast = () => {\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=e84bb2e916ce72d4f288bd3fe0526b6a`\r\n      )\r\n        .then((weather) => weather.json())\r\n        .then((json) => {\r\n          setWeatherData(json);\r\n          setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    fetchForecast();\r\n  }, [lat, lon]);\r\n\r\n  return !isLoading ? (\r\n    <div className=\"forecast\">\r\n      <h1>{city}</h1>\r\n      <h3>8-day forecast</h3>\r\n      <Accordion defaultActiveKey={weatherData.daily[0].dt}>\r\n        {weatherData.daily.map((day, key) => (\r\n          <ForecastDay key={key} day={day} />\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  ) : (\r\n    <div className=\"forecast\">\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Forecast);\r\n","import React from \"react\";\r\n\r\nimport Forecast from \"../../components/forecast/forecast.component\";\r\n\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst ForecastPage = () => {\r\n  return (\r\n    <Row>\r\n      <Col xs={12} md={{ span: 10, offset: 1 }} xxl={{ span: 8, offset: 2 }}>\r\n        <Forecast />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ForecastPage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  Navbar,\r\n  Container,\r\n  Button,\r\n  Popover,\r\n  OverlayTrigger,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { QuestionCircle } from \"react-bootstrap-icons\";\r\n\r\nimport \"./header.style.scss\";\r\n\r\nconst Header = () => (\r\n  <Row>\r\n    <Col>\r\n      <Navbar className=\"header\" bg=\"primary\" variant=\"dark\">\r\n        <Container fluid>\r\n          <Link to=\"/\">\r\n            <Navbar.Brand>\r\n              <img\r\n                src=\"/weather_app/logo.svg\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top logo\"\r\n                alt=\"logo\"\r\n              />\r\n              Weather App\r\n            </Navbar.Brand>\r\n          </Link>\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <OverlayTrigger\r\n              trigger=\"click\"\r\n              placement=\"left\"\r\n              overlay={\r\n                <Popover id=\"popover-basic\">\r\n                  <Popover.Header as=\"h3\">About App</Popover.Header>\r\n                  <Popover.Body>\r\n                    This is a test app based on <strong>OpenWeather API</strong>\r\n                    . You can type the city name and see today's forecast or\r\n                    click the calendar button to see 8-day weather forecast for\r\n                    chosen city.\r\n                  </Popover.Body>\r\n                </Popover>\r\n              }\r\n            >\r\n              <Button className=\"about\" variant=\"secondary\">\r\n                <QuestionCircle className=\"icon\" size={22} />\r\n                <span>Help</span>\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Switch, Route } from \"react-router\";\n\nimport HomePage from \"./pages/home/homepage.component\";\nimport ForecastPage from \"./pages/forecast/forecast.component\";\n\nimport Header from \"./components/header/header.component\";\n\nimport FavoriteContext from \"./context/favorite/favorite.context\";\nimport ModalContext from \"./context/modal/modal.context\";\n\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const [favoriteCities, setFavoriteCities] = useState([]);\n  const [modal, setModal] = useState({\n    show: false,\n    title: \"\",\n    text: \"\",\n  });\n\n  const addFavoriteCity = (cityData) => {\n    const checkCity = favoriteCities.filter(\n      (city) => city.name === cityData.name && city.lat === cityData.lat\n    );\n    if (checkCity.length) {\n      setModal({\n        show: true,\n        title: \"Error!\",\n        text: \"City already in favorite list!\",\n      });\n    } else {\n      saveFavoriteCity([...favoriteCities, cityData]);\n    }\n  };\n\n  const deleteFavorite = (cityData) => {\n    const newFavorites = favoriteCities.filter(\n      (city) => city.name !== cityData.name && city.lat !== cityData.lat\n    );\n    saveFavoriteCity(newFavorites);\n  };\n\n  const saveFavoriteCity = (cityArray) => {\n    setFavoriteCities(cityArray);\n    localStorage.setItem(\"favoriteCities\", JSON.stringify(cityArray));\n  };\n\n  useEffect(() => {\n    const localFavorite = JSON.parse(localStorage.getItem(\"favoriteCities\"));\n    if (localFavorite !== null) {\n      setFavoriteCities(localFavorite);\n    }\n  }, []);\n\n  return (\n    <Container className=\"App\" fluid>\n      <Header />\n      <FavoriteContext.Provider\n        value={{ favoriteCities, addFavoriteCity, deleteFavorite }}\n      >\n        <ModalContext.Provider value={{ modal, setModal }}>\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/forecast/:city/:lat/:lon\" component={ForecastPage} />\n          </Switch>\n        </ModalContext.Provider>\n      </FavoriteContext.Provider>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}